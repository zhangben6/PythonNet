网络编程
1.网络功能:数据的传输

2.ISO(国际标准化组织)

3.OSI七层模型 --> 网络通信标准化流程


应用层:提供用户服务,具体功能由程序体现
表示层:数据的压缩优化和加密
会话层:建立应用层连接,选择合适的传输服务
传输层:提供传输服务,进行流量控制
网络层:路由选择,网络互联
链路层: 进行数据交换,控制具体消息收发,链路连接
物理层:提供物理硬件传输,网卡,接口设置,传输介质

#OSI七层模型优势:
    1.建立了统一的网络工作流程
    2.每个层次功能清晰各司其职
    3.降低了耦合度,方便了开发流程

cookie:
    高内聚:模块功能尽可能单一,不要相互掺杂
    低耦合:模块之间的关联影响尽可能减少
    
#四层模型(TCP/IP模型)(七层模型的简化后形成的,七层模型太过冗余占用空间)
    应用层  传输层  网络层 物理链路层

* 将应用层,表示层,会话层统一为应用层,便与开发实践

#五层模型
应用层   传输层   网络层   链路层    物理层

数据的传输流程:
1.发送端由应用层逐层跟据协议添加首部信息,最终在物理层实现发送
2.发送的消息经过中间多个节点转发到达目标主机
3.目标主机根据协议逐层解析首部,最终到达应用层获取数据

网络协议:网络通信双方都遵守的规定,包括建立什么数据结构,消息结构,首部内容等

**网络编程基本概念
网络主机:在网络中表示一台主机的标志

    本地使用:在当前的计算机上使用 "localhost"  "127.0.0.1" 本地计算机的IP地址

    网络使用:"192.168.43.131"

    linux系统ifconfig:查看本地网络信息


    IP地址:在网络上查找一台主机的网络位置
        IPv4:点分十进制 每部分取值:0-255
        IPv6:扩充地址的范围

    特殊IP:
        127.0.0.1本机测试IP(本机回环地址)
        0.0.0.0 本地自动获取能够使用的网卡IP
        192.168.1.0 表示一个网段
        192.168.1.1 表示网关地址(常指路由器的地址)
        192.168.1.255 广播地址

    域名:网络服务器IP地址的别名

        作用:方便记忆,表达一定的含义

    端口号:port
        端口号是网络地址的一部分,用于区分主机上不同的网络应用(不能重复)

        * 在一个系统中应用监听的端口不重复

        取值范围:1~65535  2的16次方

        其中: 1~255       一些众所周知的端口号
            256~1023     系统专用端口
            1024~65535   自己专用

    网络字节序:
        网络上数据传输的排列方式(避免操作系统解析的冲突)




传输层服务:(功能:提供端对端的服务)
    ***面向连接的传输服务(基于TCP协议的数据传输)
        传输特征:提供可靠的数据传输,可靠性是指的是传输过程中无丢失,无失序,无差错,无重复

        实现手段:在通信前需要建立通信连接,通信结束需要断开连接

            连接过程(三次握手): (操作系统会帮我们完成这个三次握手的过程)
                1.client --> server 发起连接请求 req
                2.server 收到 client 请求报文(序列号),并回复报文消息:表示可以连接
                3.client 收到客户端回复:可以连接 并再次发送报文最终建立连接

            连接断开(四次挥手):
                1.主动方发送报文提出断开连接,
                2.被动方接受到断开请求,自己返回消息表示开始准备断开
                3.被动方处理消息完毕,完成断开准备,再次发送报文表示可以断开
                4.主动方收到断开指令发送报文,最终确认断开
        应用场景:适用于数据传输有准确性的要求,传输文件较大,需要确保传输可靠性的情况,例如:网页获取,文件下载,邮件收发...

    ***面向无连接的传输服务(基于UDP协议的传输)
        传输特征:不保证传输的可靠性,数据传输不需要提前建立连接.

        没有连接和断开的过程

        应用场景:网络情况较差,对传输可靠性要求不高,比如:网络视频,群聊,广播

课堂阶段要求(cookie):
    1. OSI七层模型介绍一下,TCP IP模型是什么?
    2. TCP服务和UDP服务有哪些区别? tcp udp是哪层协议?
    3. 简单描述下三次握手和四次挥手过程

回答步骤:这是什么?怎么用?在什么场景下运用?平时我怎么用?


操作系用的内核:核心代码和文件系统

socket Module
    功能:python的标准库模块,提供网络编程的一系列接口功能

    示例:
        获取计算机名字
        socket.gethostname()


        通过域名获取主机地址
        socket.gethostbyname("www.baidu.com")
        '127.0.0.1'

        根据应用程序服务获取对应的端口
        socket.getservbyname("mysql")
        3306

        查看端口对应的服务程序
        socket.getservbyport()
        'ssh

        根据域名获取服务器的信息(服务器名,别名,IP)
        socket.gethostbyaddr("www.jd.com")
        ('1.43.236.124.broad.sj.he.dynamic.163data.com.cn', [], ['124.236.43.1'])

        将点分十进制地址转换为二进制
        socket.inet_aton("198.168.1.2")
        b'\xc6\xa8\x01\x02'

        将二进制地址转换为点分十进制
        socket.inet_ntoa(b'\xc6\xa8\x01\x02')
        "192.168.1.2"
    
    套接字(socket):实现网络编程,进行数据传输的一种编程方案,通过socket模块提供的接口函数进行组合搭配实现
        分类:
            流式套接字(SOCK_STREAM)
                特征:面向连接的传输服务,能够保证数据传输的可靠性,是基于tcp请求的一种套接字,数据传输使用字节流传输

            数据报套接字(SOCK_DGRAM)
                特征:面向无连接的传输服务,不保证传输可靠,是基于udp请求的一种套接字,使用数据报进行传输
    
tcp流式套接字:
    服务端的流程:

    总的流程: socket()-->bind()-->listen()-->accept()-->recv()/send()-->close()
        1.创建套接字
        sockfd = socket(socket_family=AF_INET,socket_type=SOCK_STRAME,proto=0)

        功能:创建套接字
        参数:socket_family:地址族类型(AF_INET表示IPV4的网络地址)
            socket_type:套接字类型(SOCK_STREAM 默认流式套接字
                     _            SOCK_DGRAM 数据报套接字)
            proto:通常为0
        返回值:套接字对象

        2.绑定服务器地址
            sockfd.bind(addr)
            功能:绑定服务器网络地址
            参数:元组 (ip,port)

        3.设置套接字监听
            sockfd.listen(n)
            功能:将套接字设置为监听套接字并创建监听队列
            参数:监听队列大小
            * 一个监听套接字能够连接多个客户端套接字      

        4.等待处理客户端连接:
            connfd,affr = sockfd.accept()
            功能:阻塞等待处理客户端连接请求
            返回值:connfd 生成的新的客户端连接套接字  req
                  addr   连接的客户端的地址        
            *程序运行中遇到阻塞函数则暂停运行,直到阻塞条件满足后再继续执行

        5.收发消息:
            data=connfd.recv(buffersize)
            功能:每次最多接受消息大小(字节)
            参数:每次最多接受消息大小(字节)
            返回值:接受到的内容

            n = connfd.send(data)
            功能:发送tcp消息
            参数:要发送的内容(bytes格式)
            返回值:发送的字节数
 
        6.关闭套接字
            sockfd.close()
            功能:关闭套接字

    
    自己写一个客户端:
        总的流程: socket()-->connect()-->recv/send()-->close()
        1.创建套接字(必须相同类型套接字才能通信)
        2.请求连接
        sockfd.connect(addr)
        功能:连接服务端套接字
        参数:服务端地址
        3.消息收发:
        4.关闭套接字










    

    



