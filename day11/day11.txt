正则表达式

动机:
1.文本处理已经成为计算机的常见工作之一
2.对文本内容的搜索,定位,提取是逻辑比较复杂的工作
3.为了快速方便的解决上述问题,产生了正则表达式

定义:即文本的高级匹配模式,提供搜索替换等功能,其本质
    是一系列由字符和特殊符号组成的字符串,这个字符串即正则表达式

匹配原理: 由普通的字符和特殊符号构成,通过描述字符的重复,位置,种类
         等行为达到匹配某一类字符串的目的
        
正则特点:
    * 方便处理文本
    * 支持语言众多
    * 使用灵活多样

目标:
    1.熟练掌握正则表达式的符号
    2.能够读懂一般的正则表达式,编写简单的正则表达式
    3.能够使用Python re操作正则表达式

python --> re模块

re.findall(pattren,string)
功能:使用正则表达式匹配字符串
参数:pattren   正则表达式
    string    目标字符串
返回值:返回匹配的内容列表

元字符的使用
    1.普通字符
    元字符:a B c
    匹配规则:每个字符匹配对应的自身字符
    
    2. 或
     元字符: |
     匹配规则: 匹配 | 两边任意一个正则表达式
     re.findall("ab|cd")

    3.匹配单个字符
     元字符: .
     匹配规则:匹配除换行外任意一个字符
     re.findall('f.o','foo fao')
     ['foo','fao']

    4.匹配字符串开始位置
     元字符: ^
     匹配规则:匹配目标字符串的开始位置
     re.findall('^Jame','Hi,Jame')
     >>> []

     re.findall("^Jame","Jame,hi")
     >>> ['Jame']
    
    5.匹配字符串的结束位置
     元字符: $
     匹配规则:匹配目标字符串的结束位置
     re.findall('Jame$','hi,jame')
     >>> ['Jame']

     6.匹配重复
     元字符: *
     匹配规则:匹配前面的字符出现0次或者多次
     
     re.findall('fo*','foooooabceffo')
     >>>> ['fooooo','f','fo']

    7.匹配重复
     元字符: +
     匹配规则:匹配前面的字符出现1次或者多次
        re.findall('A.+',"A")
        []
        re.findall('A.*','A')
        ['A']

    8.匹配重复
    元字符: ?
    匹配规则:匹配前面的字符出现一次或0次

    9.匹配重复
    匹配规则:匹配前面的字符重复指定的次数
    fo{3} --> {fooo}

    10.匹配重复
    元字符: {m,n}
    匹配规则:匹配前面的字符出现 m -- n 次
    fo{2,4} --> {foo},{fooo},{foooo}

    11.匹配字符集
    元字符:[字符集]
    匹配规则:匹配字符集中任意一个字符
    [abc123] --> a b c 1 2 3

    >>> re.findall('[A-Z][a-z]*','Hi,This is Lua')
        ['Hi', 'This', 'Lua']

    12.匹配字符集
     原字符: [^...]
     匹配规则:匹配除制定字符的任意一个字符
     [^abc] --> 除了abc外的任意一个字符
     >>> re.findall('[^ ]+','This is a test')
         ['This', 'is', 'a', 'test']

    13.匹配任意(非)数字字符
    元字符: \d  \D
    >>>re.findall('\d+','2018年就快过去')
        ['2018]

    >>> re.findall('\D+','2018年就快过去')
        ['年就快过去']
    
    14.匹配任意(非)普通字符
    元字符: \w  \W
    匹配规则: \w 匹配普通字符(数字字母下划线,utf8字符)
            \W  匹配非普通字符

    >>> re.findall('\W+','@#$%^&*(')
        ['@#$%^&*(']


    15.匹配任意(非)空字符
    元字符: \s \S
    匹配字符: \s匹配任意空字符 [\r \n \t \v \f]
            \S 匹配非空字符
        >>> re.findall('\w+\s+\w+','hello  world')
            ['hello  world']

        >>> re.findall('^\S+','Tarena12fd xxx')
            ['Tarena12fd']
    
    16.匹配字符串开头结尾位置
    元字符: \A  \Z 
    匹配规则:\A 匹配字符串开头位置
            \Z 匹配字符串结尾位置
    
    绝对匹配(完全匹配):保证正则表达式匹配目标字符串的全部内容

    >>> re.findall('\A\d+-\d+\Z','15242-111')
        ['15242-111']
    
    17.匹配非单词边界
        元字符: \b \B
        匹配规则: \b 匹配单词边界(普通字符和其他字符的交界)
                \B 匹配非单词边界
