IO (input output)

在内存中存在数据交互的操作认为是io操作

和终端交互: input print
和磁盘交互:read write
和网络交互: recv send/recvfrom sendto

IO密集型程序:在程序执行有大量的io操作,而较少的cpu运算,消耗cpu少,效率低,耗时长

计算密集型程序:在程序运行中,io操作较少,cpu计算较多,cpu消耗大,运行速度快

IO模型
阻塞IO  非阻塞IO   IO多路复用   事件IO   异步IO

    *阻塞IO: IO的默认形态,效率特别低
        阻塞情况:
            因为某种条件没有达成造成的函数阻塞(accept,input,recv)
            处理IO的时间较长,产生的阻塞行为(网络延迟,大文件的读写)
        
    *非阻塞IO:
        将原本阻塞的函数通过属性的设置改变阻塞行为,变为非阻塞
    
        sockfd.setblocking(bool) 
        功能:将原本阻塞的IO设置为非阻塞的IO(设置套接字为非阻塞IO)
        参数:默认为True,表示套接字调用阻塞函数时为阻塞状态,设置为False则表示非阻塞状态


    超时检测,即设置一个最长阻塞等待时间,超时后既不再阻塞
        sockfd.settimeout(sec)
        功能:设置套接字超时时间
        参数:设置的事件,秒

    注意:超时检测不能和非阻塞通用,否则超时没有意义




*IO多路复用 (挑选机制,哪个可以执行,就先执行) 内存与其他地方的数据交互,
    访问计算机内核对IO事件进行监控,IO事件的触发信息被计算机内核感知到.
定义:同时监控多个IO事件,选择其中能够执行的IO进行IO事件处理,以此形成可以
    同时操作多个IO的行为模式,避免一个IO阻塞造成其他IO均无法执行的情况.

    IO事件就绪:IO已经发生,内核需要交给应用程序处理


具体方法:
    import select

    select:windows linux unix
    poll: linux unix
    epoll:linux

1.select 方法
    rs,ws,xs = select(rlist,wlist,xlist[,timeout])
    功能: 监控IO事件,阻塞等待IO事件发生
    参数: rlist 列表    存放需要等待条件发生的IO事件  
         wlist 列表    不需要等待条件,可以主动去处理的IO事件.存放需要主动处理的IO事件
         xlist 列表    监控错误IO事件.当发生异常你需要处理IO事件
         timeout      超时时间

    返回值: 
        rs 列表  rlist准备就绪的IO
        ws 列表  wlist中准备就绪的IO
        xs 列表  xlist中准备就绪的IO

    注意点:
        1.IO多路复用占用计算机资源较少,效率较高
        2.wlist中如果有IO则select自己返回处理
        3.在io处理过程中不要出现死循环,影响io监控


位运算:
    & 按位与
    | 按位或
    ^ 按位异或
    << 左移
    >> 右移

    如:  
    11    1011
    14    1110

    11&14 = 10 一0则0
    11|14 = 15 一1则1
    11^14 = 5  相同为0,不同为1
    11<<2 = 101100  向左移动右侧补0
    14>>2 = 11      向右移动去掉低位

poll方法:
    p = select.poll()
    功能: 创建poll对象
    返回值:poll对象

    p.register(fd,event)
    功能:注册要关注的io
    参数:
        fd    要关注的io对象
        event 要关注的事件
                常用的事件类型: POLLIN       读IO        rlist
                            POLLOUT      写io        wlist
                            PULLERR      出错io      xlist
                            POLLHUP      断开连接事件
        

         e.g.   想关注套接字多个事件:p.regidter(sockfd,POLLIN|POLLERR)

            取消多个关注:  p.unregister(sockfd,POLLIN|POLLERR)


    p.unregister(fd)
        功能:取消关注io
        参数:io对象或者文件描述符

    events = p.poll()
        功能:阻塞监控IO事件发生
        返回值:events是一个列表
        [(fileno,event),()....]
        每个就绪IO对应一个元组,元组中为该IO的fileno和就绪事件

        *返回值中没有IO对象,所以通过fileno配合io对象字典进行查找
        {fileno:io_obj}
        
    poll_server步骤:
        1.创建套接字
        2.设置套接字为关注
        3.建立fileno查找字典
        4.循环监控发生的io
        5.处理发生的io


作业:  
    熟练io模型特点
    熟悉io多路复用原理
	熟练 select  和 poll
	复习 类的使用  __init__ 继承  super
