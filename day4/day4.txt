前情回顾:
    1.httpserver v1.0
    2.IO模型
        阻塞IO: 默认IO行为, 效率低
        非阻塞IO: 设置非阻塞属性,超时检测

epoll方法
使用方法:基本同poll相同

    *将生成对象函数改为epoll
    *将所有关注io事件类型变为EPOLL类型  

epoll特点:

    *epoll是linux的专属多路复用方法
    *epoll效率比select和poll要高
    *epoll可以监控更多的IO(select 最多1024)
    *epoll支持更多的触发事件类型(EPOLLET边缘触发)

结构化数据:
    import struct
    原理: 将部分数据类型放在一起,转换成bytes格式数据包,并且可以按照指定格式解析bytes数据包

struct.Struct(fmt)
功能:生成struct格式包对象
参数:fmt 定制的数据结构组成

    e.g.
        1  b'Jame' 1.75      #要发送的一组数

        st = Struct("i4sf")  #要生成的数据格式

    常用fmt    int        i
              bytes      ns (n代表几个字符)
              float      f


st.pack(v1,v2,v3...)
功能:将数据按照指定格式打包为bytes
参数:要打包的数据
返回值:打包后的bytes子串

st.unpack(bytes)
功能:将bytes格式数据包解析
参数:要解析的数据包
返回值:打包后的bytes子串


示例:
import struct
st = struct.Struct("i4sf)
st.pack(1,b'James',1.75)

st.unpack(b"xxxx")

网络编程最后一个知识点:
    
本地套接字:
    功能:本地两个程序之间利用套接字进行通信的一种方法
    cookie:
    linux文件类型  bcd-lsp
        b(块设备文件)
        c(字符设备文件)
        d(目录文件)
        -(普通文件)
        l(链接文件)
        s(管道文件)
        p(套接字文件)
    
    1.创建本地套接字:
        sockfd = socket(AF_UNIX,SOCK_STREAM)
    2.绑定本地套接字文件
        sockfd.bind(path)
    3.监听
        sockfd.listen
    4.连接
        sockfd.accept()
    5.消息收发
        recv send

======================================================================================================


*多任务编程


    意义:充分利用计算机的多核资源,同时运行多个任务,以提高程序的执行效率

    实现方法:多进程,多线程

    并发 : 同时处理多个任务,内核在任务间不断地切换达到好像多个任务同时被执行的效果,实际每一时刻只有一个任务占有CPU

    并行 : 多个任务利用计算机多核资源在同时执行,此时多个任务间是并行关系

*进程(process)
    定义:程序在计算机中的一次运行过程

    区别:
    程序:是一个可执行的文件,里面是代码,是静态的,占有磁盘
    进程:进程是一个动态过程,占有计算机资源,有生命周期(两个同样的程序运行,产生两个不同的进程)

*进程的诞生:
    1.用户空间通过启动启动执行程序,或者调用进程创建接口发起进程创建请求
    2.操作系统接受用户请求,开始创建进程
    3.操作系统分配计算机资源,确定进程状态,开辟内存空间等
    4.操作系统将进程提供给用户使用
    总结:进程是由操作系统创建出来的

*cpu时间片:如果一个进程占用cpu内核则称这个进程在cpu时间片上

*PCB(进程控制块):在内存中开辟的一块空间,存放进程的基本信息,也是操作系统调用进程的重要标志

*进程ID(PID):系统为每个进程分配不重复的ID号,是该进程在系统中的标识
    查看进程的基本信息: ps -aux

*父子进程:系统中每一个进程都有唯一的父进程,可以有0个或者多个子进程

    查看进程数:pstree
    
*进程状态
    三态:
        就绪态:进程具备执行条件,等待系统分配cpu
        运行态:进程占有cpu时间片运行
        等待态:进程暂时阻塞,不具备执行条件

    五态:
        新建态:创建一个新的进程,获取资源的过程
        终止态:进程结束,释放资源的过程

    查看进程状态:ps -aux STAT列

        S  等待态  阻塞等待
        D  等待态
        T  暂停态  程序暂停执行的状态
        R  运行态
        Z  僵尸

进程优先级
    作用:决定进程的优先权限和占有资源的优先程度

    linux 优先级范围: -20---19 (数字越小优先级越高)
    
    查看优先级: top

    以某个优先值运行：nice -num process
        e.g. 以9运行进程
             nice -9 python3 while.py
    
后台进程：
    ps -aux

    < 有较高优先级的
    N 有较低优先级的
    + 前台进程
    s 会话组组长
    l 有进程链接发

    后台运行进程：   运行命令后加 &
    示例： python3 while.py &
    杀死一个进程: kill -9 PID

要求：
    1.什么是进程,进程和程序的区别
    2.进程有哪些状态,各种状态如何转换





进程运行特征:
    1.进程可以使用计算机多核资源
    2.进程是计算机分配资源的最小单位
    3.进程之间的运行互不干扰,相互独立
    4.每个进程空间独立,有自己的空间资源
    
进程创建

import os
pid = os.fork()
功能:创建新的进程
返回值:失败 返回一个负数
      成功 原进程中返回新进程的PID号
          新进程中返回0




































    
