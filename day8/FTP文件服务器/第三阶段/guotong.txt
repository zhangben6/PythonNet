           
    2018/10/1   python笔记

------------------------------------------------------------------------------------------------           
Linux 指令
1.cat :  (只对文件进行操作)
   cat > 文件名                新建一个文件并且可以编辑
   cat 文件名                  查看一个文件中的内容
   cat 文件1 文件2 > 文件3     将文件1和文件2中的内容合并到新文件3中 
   cat >> 文件名               向文件添加内容 

2. chmod
   chmod a+x , g+r 文件        增加所有用户的执行权限，增加同组用户的写权限
   chmod 777 文件              将所有用户都设置为读写执行权限

3. halt                        用来关闭正在运行的Linux操作系统.
   shutdown                    关机
   kill                        用来终止指定的进程的运行
   ctrl+c                      发送 SIGINT 信号给前台进程组中的所有进程，强制终止程序的执行 

4. less                        查看文件内容，用户可以选择向上看或者是向下看
   more                        查看文件内容，用户按键显示下一屏的内容       

--------------------------------------------------------------------------------------
1.字符串 str
 ''
 ""
 ''''''
 """"""
 三引号字符串可以隐式换行，换行会自动转换为'/n'

2.转义字符表
    \'             代表一个单引号
    \"                 一个双引号
    \\                 一个反斜杠
    \n                 换行
    \r                 返回光标至行首           print('aaaa\rabc')  ===  abca
    \f                 换页                    
    \t                 水平制表符               #不常用
    \v                 垂直制表符               #不常用
    \b                 倒退                     #相当于倒退一个字符重新打印后面     的字符
    \0                 空字符，字符值为0
    \0oo               oo 为两位八进制表示的字符
    \xXX               XX为两位十六进制表示的字符
    \uXXXX             Unicode16的十六进制表示的字符
    \UXXXXXXXX         Unicode32的十六进制表示的字符          

3.编码：每一个文字所对应的数值
   1）ASCII:美国信息交换标准码,英文字符编码        (2 ** 7 = 128 个字符的编码) 0~127
      #计算机为了存储更多的数据和表示更多的信号，经常会把8个位(bit)放在一起，实际上7个位就已经足够了，ASCII就是7个不同的位表示的编码
      常用的ASCII编码：
        字符     十进制     十六进制
         '0'       48         \x30
         'A'       65         \x41
         'a'       97         \x61

   2）UNICODE:全世界统一编码,全世界适用            UNICODE16(65536个)/UNICODE32(2 ** 32 个)    

4.raw 字符串
    r ''
    r ""
    r ''''''
    r """"""
    r字符串的\不作为转义字符
    例子: a = 'c:\newfile\esc'
           print(a)
        >>> c:
            ewfile\esc

          a = r'c:\newfile\esc'
          print(a)
       >>>c:\newfile\esc

5.字符串运算：  +    *    +=    *=
   注意:   * 用于生成重复的字符串
   a = '123'
   b = a * 2 
   print(b)   b = '123123'

6.索引和切片
   切片:从字符串序列中取出一部分响应的元素重新组成一个字符串
   语法：字符串[(开始索引b):(结束索引e)(:(步长s))]
   注: ()内括起的部分代表可以省略
   说明:1.开始索引是切片开始切下的位置，0代表第一个元素，-1代表最后一个元素,并且开始索引和结束索引可以越界
        2.结束索引是切片的终止索引(但不包含终止索引)
        3.步长是切片每次获取完当前索引后移动的方向和偏移量: (1)没有步长,相当于取值完成后向右移动一个索引的位置(默认为1)
                                                    (2)当步长为正整数时，取正向切片:
                                                        步长默认值为1,开始索引默认值为0,
                                                        结束索引的默认值为len(s)
                                                    (3)当步长为负整数时，取反向切片：反向切片时默认的起始位置为最后一个元素，
                                                           默认终止位置为第一个元素的前一个位置
                                                            例子:  a = 'ABCDEFGH'
                                                                   s = a[6:0:-2] 
                                                                   print(a)  -->  a = ''
7.字符串常用的一些函数：
   len(x)   求字符串的长度
   max(x)   求中出字符串中编码最大的字符(根据UNICODE的值计算比较)
   min(x)   求最小UNICODE对应的字符

   ord(x)   x代表一个字符,函数会返回这个字符的编码值
   chr(i)   i代表一个编码,函数会返回一个字符
   str(x)   把任何一个对象转换成字符串

8.# 常用字符串方法 
   语法:   对象.方法名(方法传参)

		S.startswith(prefix[,start[,end]])   #是否以prefix开头 
		
		S.endswith(suffix[,start[,end]])     #以suffix结尾 





		
		S.isalnum()                          #是否全是字母和数字，并至少有一个字符 
		
		S.isalpha()                          #是否全是字母，并至少有一个字符 
		
		S.isdigit()                          #是否全是数字，并至少有一个字符 
		
		S.isspace()                          #是否全是空白字符，并至少有一个字符 
							                  s = '      '
							                  if s.isspace():
							                      print('true')

        S.strip()                            #返回去掉左右空白字符的字符串
							                  s = '\n\r\t hello \n\t'
							                  a = s.strip()
							                  a = 'hello'

		S.lspace                             #返回去掉左边空白字符的字符串

		S.rspace                             #返回去掉右边空白字符的字符串
		
		S.islower()                          #S中的字母是否全是小写 
		
		S.isupper()                          #S中的字母是否便是大写 
		
		S.istitle()                          #S是否是首字母大写的                          

        S.center(width[,fill])               # 将原字符居中，左右默认填充空格
							                  a = 'hello'
							                  print(a.center[9,#])
							                  a = '##hello##'

        S.count(sub[,start[,end]])           # 获取一个字符串中子串的个数
									          a = 'ABADDAFABCD'
									          S = a.count('AB')
									          S = 2

									          a = 'ABADDAFABCD'
									          S = a.count('D',4)
									          S = 2



        S.find(sub[,start[,end]])            # 获取字符串中子串sub的索引，失败返回-1
									          a = 'ABADDAFABCD'
									          s = a.find('DDA')
									          s = 3  #返回目标首字符的索引值

	    S.replace(old,new[,count])           #将原字符串的old用new代替，生成一个新的字符串



