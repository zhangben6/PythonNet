进程和线程的区别
    1.两者都是多任务编程方式,都能够使用计算机内核,都是动态运行的过程,占有计算机资源
    2.进程的创建删除消耗资源要高于线程
    3.一个进程可以包含多个线程
    4.进程空间独立,数据互不干扰,有专门的ipc.线程使用全局变量通信
    5.多个线程共享进程的全局资源,资源操作时往往需要同步互斥方法
    6.进程线程在系统中都有特有属性,如ID 代码段 命令集等

使用场景:
    * 一个任务包含多个分支任务,且需要消耗资源少时用线程
    * 不同的独立任务,需要空间独立(方便资源的使用管理)用多进程
    * IO多可能选择进程 + IO多路复用.或者看通信中编码逻辑复杂

进程线程总结完毕,要求:
    1.进程线程区别有哪些
    2.你在什么情况下使用县阿城或者进程
    3.什么是同步互斥,你在什么情况下使用,如何使用
    4.进程间的通信方法知道哪些,有什么特点
    5.你是如何处理僵尸进程的
    6.进程池的原理是什么,怎么使用

------------------------------------------------------------------------------------------
网络通信模型(进程+线程+网络)
    什么是服务器?
        硬件服务器: 主机  集群
        软件服务器: 编写的后端服务程序,在硬件服务器系统上编写,提供一定的后端服务

        httpserver --> 处理http请求
        webserver --> 处理网站后端服务
        邮箱服务器 --> 邮件收发
        文件服务器 --> 文件下载上传

        架构模型: C/S  客户端服务器模型
                 B/S  浏览器服务器模型
    
    1.循环模型:循环接受客户端请求,处理请求.同一时刻只处理一个请求,处理完毕后再处理下一个.
        优点:实现简单,占用资源少
        缺点:无法同时处理多个客户端的请求
    
        使用情况:处理任务可以很快完成的情况,不需要建立并发,UDP比TCP更适合循环
    
    2.IO并发模型
        IO多路复用  协程
        优点:能同时处理多个IO,资源消耗少
        缺点:只能监控IO事件,当多任务是cpu运算时,无法同时处理

    3.多进程/多线程并发模型:每当有一个客户端连接则创建一个新的进程或者线程处理客户端请求
        优点:每个客户端可以长期占有服务器使用多核进行io处理或者cpu运算
        缺点:资源消耗较多

多进程并发:
    基于 fork 完成多进程并发
    
        1.创建套接字,绑定,监听
        2.等待接受客户端请求, accept
        3.当新的客户端连接后,创建新的进程处理客户端请求
        4.原有进程继续等待其他客户端连接
        5.如果客户端退出,则销毁对应进程

    示例见:more_fork_server.py


ftp文件服务器:
功能:1.服务器分为客户端和服务端两部分,要求启动服务端可以同时有多个客户端操作

    2.客户端可以查看服务器文件库中的文件(客户端只能查看普通文件,不包含隐藏文件)

    3.客户端可以选择文件库中的文件进行下载

    4.客户端也可以上传本地文件到文件库

    5.使用print打印移动的命令提示界面
    

技术分析: fork并发  tcp套接字
        判断普通文件:os.path.isfile()
        查看文件列表: os.listdir(x)

结构设计:将 2 3 4三个功能封装在一个类中

工作步骤:1.搭建网路
        2.封装类
        3.功能函数实现并测试

网络tcp并发:
    服务端: fork tcp并发服务器模型
    客户端:连接服务端

需求:
    